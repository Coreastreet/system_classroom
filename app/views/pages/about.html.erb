
<div class="bg-slate-200 flex md:p-10 px-4 py-6">
    <h1 class="text-2xl md:text-3xl md:font-semibold text-center w-full">
        About
    </h1>    
</div> 
<div id="about" class="p-6 md:p-10 flex flex-col items-center">
    <div class="text-xl w-full md:w-2/3 mb-6">
        <div class="pb-6 font-semibold">This website's purpose is to educate readers on Software Architecture</div>
        Primarily, I designed this website as a knowledge resource to consolidate my own understanding of software design.
        However, I also realized that it may also be useful for university students or career changers looking to polish up their software
        architecture skills. By no means do I claim to be an expert, but what I do notice from many of the books on the subject I have browsed 
        and from the in-person tutorials I had taken at university, is that most of the time, most theory taught without context 
        in real world examples. 
    </div>
    <div class="text-xl w-2/3 mb-6">
        <div class="pb-6 font-semibold">Lessons on this website will focus on real world examples</div>
        Many of the online coding websites that offer the opportunity of competition and self-paced certifications
        are similarly lacking in their ability to develop high-level software design skills and incorporate real-life examples across different sectors,
        instead excelling only in providing a cheaper alternative to learning coding in introductory university classes.
        This lack of examples and connection to the real-world job market, I would argue, is a poor approach to teaching in general because
        it dampens the interest of students in the subject and reduces their motivation or drive to continually self-educate in their chosen field.
        This is doubly important due to the ever-changing nature of the tech industry.
    </div>
    <div class="text-xl w-2/3 mb-6">
        <div class="pb-6 font-semibold">Australia lacks a structured training program for high-tech skills</div>
        The poor integration of software education with local industry needs has caused the skills of the workforce as a whole to atrophy.
        In contrast to countries like Germany, Australia lacks a robust vocational training system for high-tech skills such as software design.
        As a result, students in demanding engineering specialties usually are unable to refine their skills in a structured manner
        and according to the demands of practical work. Instead of reforming the tertiary education system to improve the skills of the tech graduates, the bipartisan consensus of the government 
        is to support rapidly growing levels of immigration, in order to lower wages through competition and provides employers the 
        access to more skilled IT labour they desire. 
    </div>
    <div class="text-xl w-2/3 mb-6"> 
        <div class="pb-6 font-semibold">Why Australian universities are not fit for teaching software well</div>
        The marketization of the education system has compelled schools and universities to become more keenly responsive
        to the demand preferences of international students, because they pay the highest fees, and less responsive to the needs of local employers.
        As a result, universities end up lowering the academic standard of their degrees and prioritising general theoretical 
        knowledge over local content in a bid to attract more overseas students. Moreover, marketisation has caused Universities to 
        increase the student:teacher ratio despite its detrimental effect on teaching quality. 
        Compared to other developed nations, the teaching quality for software-related subjects in Australia is relatively subpar. 
    </div>
    <div class="text-xl w-2/3 mb-6"> 
        <div class="pb-6 font-semibold">Boot camps may offer better education but are too expensive</div>
        Reputable bootcamps may offer better education than universities because bootcamps often hire working software developers as mentors, have close contacts with tech employers, 
        offer internships and teach based on solo/group projects, with most courses lasting on average a few months for full-time (40hrs/wk) students. 
        During the majority of that time, students are immersed in a coding environment with few distractions, simulating a real-life workplace. 

        However, unlike university degrees, the government does not regulate the prices of bootcamp courses. Bootcamp courses are, correspondingly, more expensive. 
        The cost for an average bootcamp course in America lasting between 3-6 months is $13,600, the approximate equivalent of one year in university.
        The effective cost may even be higher than advertised given the current high interest rate environment if private loans are required. 

        More expensive courses that span multiple years do exist but enrolment is usually 
        as expensive or as competitive as their university equivalents. 
        
        Bootcamps can offer a practical crash course to software development; but are intended to be more intense, more shorter and more expensive than
        a University degree.
    </div>
    <div class="text-xl w-2/3 mb-6"> 
        <div class="pb-6 font-semibold">The best solution: Don't enrol in either</div>
        The same skills that previously could only be taught in classrooms at University or Bootcamps 
        can also be learnt by watching Udemy, Youtube or LinkedIn Learning videos. 
        In fact, online resources offer more choice, more interactivity and more depth than the limited courses at bootcamps or universities,
        which are often inflexible (it costs to quit), require physical travel and are very limited in their variety of their
        educational resources, which are usually bland (moreso in universites) and generic. Moreover, both institutions profit from
        overloading classes, that is to say, maximising the student to teacher ratio to make more money as the expense of the students' learning outcomes.
    </div>    
    <div class="text-xl w-2/3 mb-6"> 
        <div class="pb-6 font-semibold">Learning through thinking, not memorizing</div>
            Information can be learnt and lost over time, but memorizing the specifics of a textbook page doesn't make you smarter.
            Beliefs can be right one day and wrong the next, so holding onto them is pointless.
            Since all information is derived in essence from the real world, which represent creations of other people's minds, we should instead observe 
            the real world ourselves and learn how to translate our own observations into crucial information ourselves.
            One day when we master the thinking process ourselves, then we will no longer be a prisoner of other people's observations and thinking habits.
        </div>
    </div>
</div>
